{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\52811\\\\Coursera-Web\\\\REACT\\\\streams\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.js\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\nimport \"../../css/bootstrap.min.css\";\nimport ReduxThunk from \"redux-thunk\";\nimport { connect } from \"react-redux\";\nimport { createStreams } from \"../../actions/index\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = formProps => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            fontWeight: \"bold\"\n          },\n          children: formProps.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          autoComplete: \"off\",\n          className: \"form-control\",\n          ...formProps.input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.renderedError(formProps.meta)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n  renderedError(meta) {\n    if (meta.touched && meta.error) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n  onSubmit(formValues) {\n    console.log(formValues);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Insert Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Insert Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nconst formWrapped = reduxForm({\n  form: \"streamCreate\",\n  validate: validate\n})(StreamCreate);\nexport default connect()(formWrapped);","map":{"version":3,"sources":["C:/Users/52811/Coursera-Web/REACT/streams/client/src/components/streams/StreamCreate.js"],"names":["React","Field","reduxForm","ReduxThunk","connect","createStreams","StreamCreate","Component","renderInput","formProps","fontWeight","label","input","renderedError","meta","touched","error","onSubmit","formValues","console","log","render","props","handleSubmit","validate","errors","title","description","formWrapped","form"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,SAAhB,QAAiC,YAAjC;AACA,OAAO,6BAAP;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,qBAA9B;;AAEA,MAAMC,YAAN,SAA2BN,KAAK,CAACO,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAYvCC,WAZuC,GAYxBC,SAAD,IAAe;AACzB,0BACI;AAAK,QAAA,SAAS,EAAG,YAAjB;AAAA,gCACI;AAAO,UAAA,KAAK,EAAI;AAACC,YAAAA,UAAU,EAAE;AAAb,WAAhB;AAAA,oBAAuCD,SAAS,CAACE;AAAjD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAO,UAAA,YAAY,EAAC,KAApB;AAA0B,UAAA,SAAS,EAAC,cAApC;AAAA,aAAuDF,SAAS,CAACG;AAAjE;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAA,oBAAM,KAAKC,aAAL,CAAmBJ,SAAS,CAACK,IAA7B;AAAN;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAOH,KApBsC;AAAA;;AAEvCD,EAAAA,aAAa,CAAEC,IAAF,EAAQ;AACjB,QAAGA,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACE,KAAxB,EAA+B;AAC3B,0BACI;AAAA,kBACKF,IAAI,CAACE;AADV;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH;AACJ;;AAYDC,EAAAA,QAAQ,CAAEC,UAAF,EAAc;AAClBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,wBACI;AAAM,MAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKN,QAA7B,CAAhB;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAG,OAAd;AAAsB,QAAA,SAAS,EAAI,KAAKT,WAAxC;AAAqD,QAAA,KAAK,EAAG;AAA7D;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAG,aAAd;AAA4B,QAAA,SAAS,EAAI,KAAKA,WAA9C;AAA2D,QAAA,KAAK,EAAG;AAAnE;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,SAAS,EAAG,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAlCsC;;AAqC3C,MAAMgB,QAAQ,GAAIN,UAAD,IAAgB;AAC7B,QAAMO,MAAM,GAAG,EAAf;;AACA,MAAG,CAACP,UAAU,CAACQ,KAAf,EAAsB;AAClBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACH;;AACD,MAAG,CAACR,UAAU,CAACS,WAAf,EAA4B;AACxBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACH;;AACD,SAAOF,MAAP;AACH,CATD;;AAWA,MAAMG,WAAW,GAAG1B,SAAS,CAAC;AAC1B2B,EAAAA,IAAI,EAAE,cADoB;AAE1BL,EAAAA,QAAQ,EAAEA;AAFgB,CAAD,CAAT,CAGjBlB,YAHiB,CAApB;AAKA,eAAeF,OAAO,GAAGwB,WAAH,CAAtB","sourcesContent":["import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport \"../../css/bootstrap.min.css\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStreams } from \"../../actions/index\";\r\n\r\nclass StreamCreate extends React.Component {\r\n\r\n    renderedError (meta) {\r\n        if(meta.touched && meta.error) {\r\n            return (\r\n                <div>\r\n                    {meta.error}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    renderInput = (formProps) => {\r\n        return (\r\n            <div className = \"form-group\">\r\n                <label style = {{fontWeight: \"bold\"}}>{formProps.label}</label>\r\n                <input autoComplete=\"off\" className=\"form-control\" {...formProps.input} />\r\n                <div>{this.renderedError(formProps.meta)}</div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onSubmit (formValues) {\r\n        console.log(formValues);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n                <Field name = \"title\" component = {this.renderInput} label = \"Insert Title\"/>\r\n                <Field name = \"description\" component = {this.renderInput} label = \"Insert Description\" />\r\n                <button className = \"btn btn-primary\">Submit</button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nconst validate = (formValues) => {\r\n    const errors = {};\r\n    if(!formValues.title) {\r\n        errors.title = \"You must enter a title\";\r\n    }\r\n    if(!formValues.description) {\r\n        errors.description = \"You must enter a description\";\r\n    }\r\n    return errors;\r\n};\r\n\r\nconst formWrapped = reduxForm({\r\n    form: \"streamCreate\",\r\n    validate: validate\r\n})(StreamCreate);\r\n\r\nexport default connect()(formWrapped);"]},"metadata":{},"sourceType":"module"}