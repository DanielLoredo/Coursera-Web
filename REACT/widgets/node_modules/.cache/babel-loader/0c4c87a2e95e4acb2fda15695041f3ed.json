{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\52811\\\\Coursera-Web\\\\REACT\\\\widgets\\\\src\\\\components\\\\Dropdown.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport \"../css/bootstrap.min.css\";\n\nconst Dropdown = ({\n  label,\n  options,\n  selected,\n  onSelectedChange\n}) => {\n  _s();\n\n  const [open, setOpen] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    document.body.addEventListener(\"click\", event => {\n      if (ref.current && ref.current.contains(event.target)) {\n        return;\n      }\n\n      setOpen(false);\n    });\n  }, []);\n  const renderedOptions = options.map(option => {\n    if (option.value === selected.value) {\n      return null;\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"a\", {\n      className: `dropdown-item ${open ? \"d-block\" : \"d-none\"}`,\n      href: \"#\",\n      onClick: () => {\n        onSelectedChange(option);\n        setOpen(!open);\n      },\n      children: option.label\n    }, option.value, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        setOpen(!open);\n      },\n      className: \"btn dropdown-toggle\",\n      type: \"button\",\n      children: selected.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderedOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dropdown, \"wl9VvfhnMVWQ+kCekFjcRPEi3/0=\");\n\n_c = Dropdown;\nexport default Dropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"sources":["C:/Users/52811/Coursera-Web/REACT/widgets/src/components/Dropdown.js"],"names":["React","useState","useEffect","useRef","Dropdown","label","options","selected","onSelectedChange","open","setOpen","ref","document","body","addEventListener","event","current","contains","target","renderedOptions","map","option","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAO,0BAAP;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA,QAAjB;AAA2BC,EAAAA;AAA3B,CAAD,KAAmD;AAAA;;AAChE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMU,GAAG,GAAGR,MAAM,CAAC,IAAD,CAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,QAAQ,CAACC,IAAT,CAAcC,gBAAd,CAA+B,OAA/B,EAAyCC,KAAD,IAAW;AAC/C,UAAGJ,GAAG,CAACK,OAAJ,IAAeL,GAAG,CAACK,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAAlB,EAAqD;AACjD;AACH;;AAEDR,MAAAA,OAAO,CAAC,KAAD,CAAP;AACH,KAND;AAOH,GARQ,EAQN,EARM,CAAT;AAUA,QAAMS,eAAe,GAAGb,OAAO,CAACc,GAAR,CAAaC,MAAD,IAAY;AAC5C,QAAGA,MAAM,CAACC,KAAP,KAAiBf,QAAQ,CAACe,KAA7B,EAAoC;AAChC,aAAO,IAAP;AACH;;AAED,wBACI;AACG,MAAA,SAAS,EAAK,iBAAgBb,IAAI,GAAG,SAAH,GAAe,QAAS,EAD7D;AACgE,MAAA,IAAI,EAAG,GADvE;AAEG,MAAA,OAAO,EAAI,MAAM;AAACD,QAAAA,gBAAgB,CAACa,MAAD,CAAhB;AAA0BX,QAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AAAe,OAF9D;AAAA,gBAIKY,MAAM,CAAChB;AAJZ,OAAUgB,MAAM,CAACC,KAAjB;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH,GAbuB,CAAxB;AAeA,sBACI;AAAK,IAAA,GAAG,EAAIX,GAAZ;AAAiB,IAAA,SAAS,EAAG,UAA7B;AAAA,4BACI;AAAA,gBAAKN;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAQ,MAAA,OAAO,EAAG,MAAM;AAACK,QAAAA,OAAO,CAAC,CAACD,IAAF,CAAP;AAAe,OAAxC;AAA0C,MAAA,SAAS,EAAC,qBAApD;AAA0E,MAAA,IAAI,EAAC,QAA/E;AAAA,gBACKF,QAAQ,CAACF;AADd;AAAA;AAAA;AAAA;AAAA,YAHJ,eAMI;AAAA,gBACKc;AADL;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH,CAzCD;;GAAMf,Q;;KAAAA,Q;AA4CN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport \"../css/bootstrap.min.css\";\r\n\r\nconst Dropdown = ({label, options, selected, onSelectedChange }) => {\r\n    const [open, setOpen] = useState(false);\r\n    const ref = useRef(null);\r\n\r\n    useEffect(() => {\r\n        document.body.addEventListener(\"click\", (event) => {\r\n            if(ref.current && ref.current.contains(event.target)){\r\n                return;\r\n            }\r\n            \r\n            setOpen(false);\r\n        });\r\n    }, []);\r\n\r\n    const renderedOptions = options.map((option) => {\r\n        if(option.value === selected.value) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <a key = {option.value} \r\n               className = {`dropdown-item ${open ? \"d-block\" : \"d-none\"}`} href = \"#\"\r\n               onClick = {() => {onSelectedChange(option); setOpen(!open)}}\r\n            >\r\n                {option.label}\r\n            </a>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div ref = {ref} className = \"dropdown\">\r\n            <h6>{label}</h6>\r\n            \r\n            <button onClick= {() => {setOpen(!open)}} className=\"btn dropdown-toggle\" type=\"button\">\r\n                {selected.label}\r\n            </button>\r\n            <div >\r\n                {renderedOptions}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dropdown;"]},"metadata":{},"sourceType":"module"}